import asyncio
import json
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


def load_config():
    print("[LOG] –ó–∞–≥—Ä—É–∂–∞–µ–º config.json...")
    with open("config.json", "r") as f:
        data = json.load(f)
    print("[LOG] –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:", data)
    return data


def save_config(data):
    print("[LOG] –°–æ—Ö—Ä–∞–Ω—è–µ–º config.json:", data)
    with open("config.json", "w") as f:
        json.dump(data, f, indent=2)
    print("[LOG] –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


def get_schedule(group):
    print(f"[LOG] –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}...")
    try:
        response = requests.get(
            f"https://iis.bsuir.by/api/v1/schedule?studentGroup={group}"
        )
        response.raise_for_status()
        print("[LOG] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ.")
        return response.json()
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", e)
        return {}


def get_current_week_number(start_date_str):
    if not start_date_str:
        print("[LOG] –ù–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –Ω–µ–¥–µ–ª—é.")
        return 1

    start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
    current_date = datetime.now()
    days_diff = (current_date - start_date).days
    week_number = ((days_diff // 7) + 1) % 4
    if (week_number == 0):
        week_number = 4
    print(f"[LOG] –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_number}")
    return max(1, week_number)


def get_tomorrow_lessons(group):
    print(f"[LOG] –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}...")
    data = get_schedule(group)
    if not data:
        print("[LOG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return None

    tomorrow = datetime.now() + timedelta(days=1)
    days_map = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    tomorrow_day_name = days_map[tomorrow.weekday()]
    print(f"[LOG] –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {tomorrow_day_name}")

    schedules = data.get("schedules", {})
    tomorrow_schedule = schedules.get(tomorrow_day_name, [])
    if not tomorrow_schedule:
        print("[LOG] –ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç.")
        return None

    current_week = get_current_week_number(data.get("startDate"))
    lessons_options = []

    for lesson in tomorrow_schedule:
        if current_week not in lesson.get("weekNumber", []):
            continue
        subject = lesson.get("subject", "")
        type = lesson.get("lessonTypeAbbrev", "")
        subgroup = lesson.get("numSubgroup", 0)
        subgroup_info = f" (–ø–æ–¥–≥—Ä. {subgroup})" if subgroup > 0 else ""
        option_text = f"–Ω–µ –±—É–¥–µ—Ç –Ω–∞ {type} {subject} {subgroup_info}"
        lessons_options.append(option_text)

    print(f"[LOG] –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {len(lessons_options)}")
    return lessons_options if lessons_options else None


async def send_daily_poll(chat_id: int, group: str):
    print(f"[LOG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç {chat_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group}...")
    lessons = get_tomorrow_lessons(group)
    if not lessons:
        print("[LOG] –ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç ‚Äî –æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    question = f"{(datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')}"
    print(f"[LOG] –í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞: {question}")
    print(f"[LOG] –í–∞—Ä–∏–∞–Ω—Ç—ã: {lessons}")

    await bot.send_poll(
        chat_id=chat_id,
        question=question,
        options=lessons,
        is_anonymous=False,
        allows_multiple_answers=True,
    )
    print("[LOG] –ü–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    await bot.send_poll(
        chat_id=chat_id,
        question="–ø—Ä–∏—á–∏–Ω–∞",
        options=["—É–≤–∞–∂", "–Ω–µ—É–≤–∞–∂", "–±—É–¥—É"],
        is_anonymous=False,
    )
    print("[LOG] –í—Ç–æ—Ä–æ–π –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


@dp.message(Command("start"))
async def start(message: types.Message):
    print(f"[LOG] –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    config = load_config()
    config["chat_id"] = message.chat.id
    save_config(config)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ë–ì–£–ò–†\n\n"
        f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
        f"üßë‚Äçüéì –ì—Ä—É–ø–ø–∞: {config['group']}\n"
        f"‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {config['time']}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/setgroup <–Ω–æ–º–µ—Ä> ‚Äî —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
        f"/settime <—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã> ‚Äî —Å–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    print(f"[LOG] Chat ID {message.chat.id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


@dp.message(Command("setgroup"))
async def set_group(message: types.Message):
    print(f"[LOG] –ö–æ–º–∞–Ω–¥–∞ /setgroup –æ—Ç {message.from_user.id}")
    args = message.text.split()
    if len(args) != 2:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setgroup 472302")

    group = args[1]
    config = load_config()
    config["group"] = group
    save_config(config)

    await message.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {group}")
    print(f"[LOG] –ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {group}")


@dp.message(Command("settime"))
async def set_time(message: types.Message):
    print(f"[LOG] –ö–æ–º–∞–Ω–¥–∞ /settime –æ—Ç {message.from_user.id}")
    args = message.text.split()
    if len(args) != 2:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /settime 22:00")

    new_time = args[1]
    print(f"[LOG] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}")
    config = load_config()
    config["time"] = new_time
    save_config(config)

    scheduler.remove_all_jobs()
    print("[LOG] –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã.")

    h, m = map(int, new_time.split(":"))
    chat_id = config.get("chat_id")
    group = config.get("group")

    if not chat_id:
        print("[WARN] Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start.")
        return await message.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª chat_id!")

    scheduler.add_job(send_daily_poll, "cron", hour=h, minute=m, args=[chat_id, group])
    print(f"[LOG] –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {h:02d}:{m:02d}")

    await message.reply(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}")


async def main():
    print("[LOG] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    config = load_config()
    h, m = map(int, config["time"].split(":"))
    chat_id = config.get("chat_id")
    group = config.get("group")

    if chat_id:
        print(f"[LOG] –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —á–∞—Ç–∞ {chat_id} ({group}) –≤ {h:02d}:{m:02d}")
        scheduler.add_job(send_daily_poll, "cron", hour=h, minute=m, args=[chat_id, group])
    else:
        print("[WARN] Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã —è –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª.")

    scheduler.start()
    print("[LOG] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")

    await dp.start_polling(bot)


if __name__ == "__main__":
    print("[LOG] –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã main()")
    asyncio.run(main())
